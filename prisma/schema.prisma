generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ArtSource {
  DA
  PIXIV
  TWITTER
  OTHER
}

enum Visibility {
  PRIVATE
  UNLISTED
  PUBLIC
}

enum TagCategory {
  CHARACTER
  LOCATION
  MEDIA
  OTHER
}

model User {
  id     String  @id
  isMod  Boolean @default(false)
  posts  Post[]
  albums Album[]

  comments  Comment[]
  likes     UserLikes[]
  followers UserFollowing[] @relation("UserFollowers")
  idols     UserFollowing[] @relation("UserIdols")

  @@index([id])
}

model UserFollowing {
  idol       User     @relation("UserFollowers", fields: [idolId], references: [id], onDelete: Cascade)
  idolId     String
  follower   User     @relation("UserIdols", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followedAt DateTime @default(now())

  @@id(name: "following", [idolId, followerId])
}

model UserLikes {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String   @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  likedAt DateTime @default(now())

  @@id(name: "liking", [postId, userId])
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  visibility Visibility @default(PUBLIC)

  title String
  tags  PostTags[]

  src    ArtSource?
  artId  String     @default("")
  images Image[]

  comments Comment[]
  likes    UserLikes[]
  albums   AlbumPosts[]

  @@index([userId])
}

model Image {
  id     String @id @default(uuid()) @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  img    String
  postId String @db.Uuid
}

model PostTags {
  post     Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String      @db.Uuid
  tag      Tag         @relation(fields: [tagName, tagCat], references: [name, category], onDelete: Cascade)
  tagName  String
  tagCat   TagCategory
  taggedAt DateTime    @default(now())

  @@id(name: "taggingId", [postId, tagName, tagCat])
}

model Tag {
  name     String
  category TagCategory
  posts    PostTags[]

  @@id(name: "id", [name, category])
}

model Album {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  visibility Visibility @default(PUBLIC)

  name  String
  posts AlbumPosts[]
}

model AlbumPosts {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String   @db.Uuid
  album   Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String   @db.Uuid
  addedAt DateTime @default(now())

  @@id(name: "postAlbum", [postId, albumId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.Uuid
  text   String
}

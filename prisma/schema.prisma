generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArtSource {
  DA
  PIXIV
  TWITTER
  OTHER
}

enum Visibility {
  PRIVATE
  UNLISTED
  PUBLIC
}

model User {
  id     String  @id
  isMod  Boolean @default(false)
  posts  Post[]
  albums Album[]

  comments  Comment[]
  likes     UserLikes[]
  followers UserFollowing[] @relation("UserFollowers")
  idols     UserFollowing[] @relation("UserIdols")

  @@index([id])
}

model UserFollowing {
  idol       User     @relation("UserFollowers", fields: [idolId], references: [id], onDelete: Cascade)
  idolId     String
  follower   User     @relation("UserIdols", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followedAt DateTime @default(now())

  @@id([idolId, followerId])
}

model UserLikes {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String   @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
}

model Post {
  id         String     @id @default(uuid()) @db.Uuid
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  visibility Visibility @default(PUBLIC)

  title String
  tags  Tag[]

  src    ArtSource?
  artId  String     @default("")
  images Image[]

  comments Comment[]
  albums   Album[]
  likes    UserLikes[]

  @@index([userId])
}

model Image {
  id     String @id @default(uuid()) @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  img    String
  postId String @db.Uuid
}

model Tag {
  name     String @id
  category String
  posts    Post[]
}

model Album {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  name  String
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  by   User?   @relation(fields: [byId], references: [id], onDelete: SetNull)
  byId String?

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.Uuid
  text   String
}
